<?xml version = "1.0" encoding="utf-8"?>
<api>
	<description>
		Family Unplugged REST api.
	</description>

	<command id="activities" security="public">
		<description>
			Family Unplugged activities list
		</description>
		<index>
			<description>
				Lists all activities
			</description>
			<action file="backend.php">
				<![CDATA[
					listActivities();
				]]>
			</action>
		</index>
		<get>
			<description>
				Search activity by name
			</description>
			<action file="backend.php">
				<![CDATA[
					getActivity($_REST['activities']);
				]]>
			</action>
		</get>

	</command>

	<command id="userInfo" security="public">
		<description>
			Information for current user
		</description>
		<index>
			<description>
				<![CDATA[
					Gets information about logged-in user

					https://dev.m.gatech.edu/.../api/userInfo
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					getUserInfo();
				]]>
			</action>
		</index>
	</command>
	<command id="register" security="public">
			<description>
				Register a new user
			</description>
			<post>
				<description>
					<![CDATA[
						POST Parameters: username, password, name, email, dateOfBirth

						--"name" is full/real name
						--Registration page will need all of these fields. You could chose to make some of them optional 

						--You could also chose to require password confirmation, but that should be done client-side

						--Will return an error if username already exists
					]]>
				</description>
				<action file="backend.php">
					<![CDATA[
						registerUser($_POST['username'], $_POST['password'], $_POST['name'], $_POST['email'], $_POST['dateOfBirth']);
					]]>
				</action>
			</post>
		</command>

	<command id="login" security="public">
		<description>
			Log in and get a session ID
		</description>
		<index>
			<description>
				<![CDATA[

					https://dev.m.gatech.edu/.../api/login?username=USERNAME&password=PASSWORD


					Returns error if invalid credentials or JSON with session ID to use for future requsts.


					This will be changed to be base64 encoded
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					getSID($_GET['username'], $_GET['password']);
				]]>
			</action>
		</index>
	</command>

	<command id="testSID" security="public">
		<description>
			Test Session ID
		</description>
		<index>
			<description>
				<![CDATA[
					https://dev.m.gatech.edu/.../api/testSID


					throws some data on the screen
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					testSID();
				]]>
			</action>
		</index>
	</command>

	<command id="events" security="public">
		<description>
			Interacts with an individual's events. Requires a valid session ID.
		</description>
		<index>
			<description>
				<![CDATA[
					Gets a user's events for a given day. May be expanded later.



					Ex: https://dev.m.gatech.edu/.../api/events?date=2014-03-08


					To get events in a date range, put GET parameters startDate and endDate instead of just "date."

					Note that range has priority, so if you put both a startDate and an endDate, "date" will be ignored. Right now, if startDate or endDate are null, events from a date range will not be selected. I may change this later to go from the beginning or end of "time" (user registration time) if anyone wants that.

					Put dates in MySQL format yyyy-mm-dd
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					getDayEvents($_GET['date'], $_GET['startDate'], $_GET['endDate']);
				]]>
			</action>
		</index>
		<post>
			<description>
				<![CDATA[
				Submit an event for logged-in user.

				POST parameters - date (MySQL format), activityID, note, hours
					
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					postEvent($_POST['date'], $_POST['activityID'], $_POST['note'], $_POST['hours']);
				]]>
			</action>
		</post>
		<delete>
			<description>
				<![CDATA[
					Delete a single event (identified by EventID, which is returned whenever an event is fetched from the database)

					DELETE parameters - EventID
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					deleteEvent($_REST['events']);
				]]>
			</action>
		</delete>		
	</command>
	<command id="eventEdit" security="public">
		<description>
			<![CDATA[
				Allows user to edit events
			]]>
		</description>
		<post>
			<description>
				<![CDATA[
					Send POST to http://dev.m.gatech.edu/.../eventEdit with parameters eventID, date, activityID, note, and hours.
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					putEvent($_POST["eventID"],$_POST['date'], $_POST['activityID'], $_POST['note'], $_POST['hours']);
				]]>
			</action>
		</post>
	</command>

	<command id="teams" security="public">
		<description>
			<![CDATA[
				Handles team creation and management

				Completely untested
			]]>
		</description>
		<index>
			<description>
				Gets team information for logged user
			</description>
			<action file="backend.php">
				<![CDATA[
					getUserTeamInfo();
				]]>
			</action>
		</index>
		<post>
			<description>
				<![CDATA[
					Creates a new team. Post params: name

					Scoring Schema is set to default schema for now; Track hours left as default (5).
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					createTeam($_POST['name']);
				]]>
			</action>
		</post>
		<!--
		<get>
			<description>temp
			</description>
			<action file="backend.php">
				<![CDATA[
					createTeam($_GET['name']);
				]]>
			</action>
		</get>
		-->
	</command>
	<command id="logout" security="public">
		<description>
			Logs out of a session
		</description>
		<index>
			<description>
				Logs out
			</description>
			<action file="backend.php">
				<![CDATA[
					logout();
				]]>
			</action>
		</index>
	</command>
	<command id="reports" security="public">
		<description>
			Methods for getting information for reports screen
		</description>
		<index>
			<description>
				<![CDATA[
					Example:

					https://dev.m.gatech.edu/.../api/reports?startDate=WEEK-START-DATE&endDate=WEEK-END-DATE&teamID=TEAM-ID 

					If you want individual reports, don't add the teamID field to the URL. Currently, only individual reports work.
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					if(array_key_exists("teamID", $_GET)){
						getTeamReport($_GET["teamID"], $_GET["startDate"], $_GET["endDate"]);
					}
					else{
						getIndividualReport($_GET["startDate"],$_GET["endDate"]);
					}
				]]>
			</action>
		</index>
	</command>
	<command id="schedule" security="public">
		<description>
			Run scheduling script
		</description>
		<index>
			<description>
				<![CDATA[
					/api/schedule?username=USERNAME&startDate=START_DATE&endDate=END_DATE
				]]>
			</description>
			<action file="backend.php">
				<![CDATA[
					scheduleScript($_GET["username"], $_GET["startDate"], $_["endDate"]);
				]]>
			</action>
		</index>
	</command>
</api>
